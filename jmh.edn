;; see the sample file jmh.edn for more examples:
;; https://github.com/jgpc42/jmh-clojure/blob/master/resources/sample.jmh.edn
;; also refer to the Java example files for more documentation
;; http://hg.openjdk.java.net/code-tools/jmh/file/default/jmh-samples/src/main/java/org/openjdk/jmh/samples/


{:benchmarks
 [{:name :main-1-generation
   :fn clojush.bench.helpers/call-main
   :args [:param/one-generation :param/parallel]
   :options [:main]}
  {:name :main-1-generation-serial
   :fn clojush.bench.helpers/call-main
   :args [:param/one-generation :param/serial]
   :options [:main]}
  {:name :main-20-generations
   :fn clojush.bench.helpers/call-main
   :args [:param/twenty-generations :param/parallel]
   :options [:main]}

  {:name :eval-push
   :fn clojush.interpreter/eval-push
   :args [:eval-push-input]
   :apply true
   :options [:captured]}]

 :options
 {:main {:mode :single-shot
         :fork 5
         :timeout [1 :hr]}
  :captured {:mode :single-shot
             :fork 5
             :output-time-unit :ms
             :measurement {:iterations 1000}}}
 :states
 {:eval-push-inputs
  {:scope :benchmark
   :trial {:setup {:fn clojush.bench.helpers/grab-call-inputs
                   :args [:param/eval-push-sym :param/n-call-inputs]}}}
  :eval-push-input
  {:iteration {:setup {:fn (fn [a b] (rand-nth b))
                       :args [:state/eval-push-inputs]}}}}

 :params
 {:one-generation 1
  :twenty-generations 20
  :serial true
  :parallel false
  :eval-push-sym clojush.interpreter/eval-push
  :n-call-inputs 1000}}
